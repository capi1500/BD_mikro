@using Conference.Data;

@inject LectureService LectureService;
@inject PaperService PaperService;

<EditForm Model="@createLectureModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <CustomValidation @ref="validation" />
    <ValidationSummary />

    <p>
        <label>
            When:
            <RadzenDatePicker id="when" @bind-Value="createLectureModel.When" ShowTime="true" ShowSeconds="false"/>
        </label>
        <label>
            Paper:
            <InputSelect id="paper" @bind-Value="@createLectureModel.PaperId">
                <option value="null">--------</option>
                @foreach (var paper in papersById.Values.OrderBy(p => p.Name))
                {
                    <option value="@paper.Id">@paper.Name</option>
                }
            </InputSelect>
        </label>
        <label>
            Speaker:
            <InputSelect id="speaker" @bind-Value="@createLectureModel.SpeakerId">
                @if(createLectureModel.PaperId is not null)
                {
                    <option value="null">--------</option>
                    @foreach (var author in papersById[createLectureModel.PaperId.Value].Authors.OrderBy(a => a.DisplayName))
                    {
                        <option value="@author.Id">@author.DisplayName</option>
                    }
                }
                else
                {
                    <option value="null">Select a paper first.</option>
                }
            </InputSelect>
        </label>
    </p>

    <button type="submit">Submit</button>
</EditForm>

@code
{
    [Parameter, EditorRequired]
    public Session Session { get; set; } = null!;

    private Dictionary<int, Paper> papersById = new Dictionary<int, Paper>();

    private CreateLecture createLectureModel = new() { When = DateTime.Now };

    private CustomValidation? validation;

    private void HandleValidSubmit()
    {
        validation?.ClearErrors();

        var errors = new Dictionary<string, List<string>>();

        if (createLectureModel.When < Session.When)
        {
            errors.Add(nameof(createLectureModel.When), new (){
                $"Session begins {Session.When:dd-MM-yyyy HH:mm}. The lecture cannot begin before then."
            });
        }

        if (Session.Chair.Id == createLectureModel.SpeakerId)
        {
            errors.Add(nameof(createLectureModel.SpeakerId), new (){
                $"Sessions' man in the chair is {Session.Chair.DisplayName}. The speaker must be different than man in the chair."
            });
        }
        
        if (errors.Any())
        {
            validation?.DisplayErrors(errors);
        }
        else
        {
            createLectureModel.SessionId = Session.Id;
            LectureService.CreateLecture(createLectureModel);
        }

        return;
    }

    protected override void OnInitialized() => 
        papersById = PaperService.GetPapers().ToDictionary(p => p.Id);
}